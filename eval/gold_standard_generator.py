#!/usr/bin/env python3
"""
Gold Standard QA Îç∞Ïù¥ÌÑ∞ÏÖã ÏÉùÏÑ±Í∏∞

Î™©Ï†Å:
- Ïó∞Íµ¨ ÌèâÍ∞ÄÎ•º ÏúÑÌïú Í≥†ÌíàÏßà Question-Answer Ïåç ÏÉùÏÑ±
- BIM Ï†ÑÎ¨∏Í∞ÄÍ∞Ä Í≤ÄÏ¶ù Í∞ÄÎä•Ìïú Íµ¨Ï°∞
- Graph-RAG, Forgetting Î©îÏª§ÎãàÏ¶ò ÌèâÍ∞ÄÏö©
"""

import json
import uuid
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Any


class GoldStandardGenerator:
    """Gold Standard QA ÏÉùÏÑ±Í∏∞"""
    
    def __init__(self, base_dir: Path):
        self.base_dir = Path(base_dir)
        self.eval_dir = self.base_dir / "eval"
        self.eval_dir.mkdir(parents=True, exist_ok=True)
        
        # QA ÌÖúÌîåÎ¶ø
        self.qa_templates = self._load_qa_templates()
    
    def _load_qa_templates(self) -> List[Dict[str, Any]]:
        """QA ÌÖúÌîåÎ¶ø Ï†ïÏùò"""
        
        return [
            # === RQ1: Graph-RAG Í≤ÄÏÉâ ÏÑ±Îä• ===
            {
                "category": "entity_search",
                "subcategory": "ifc_lookup",
                "question_template": "GUID {guid}Îäî Ïñ¥Îñ§ IFC ÏöîÏÜåÏù∏Í∞ÄÏöî?",
                "answer_template": "GUID {guid}Îäî {entity_type}ÏûÖÎãàÎã§. Ïù¥Î¶Ñ: {name}",
                "difficulty": "easy",
                "requires": ["guid", "entity_type", "name"],
                "evaluation_type": "exact_match"
            },
            {
                "category": "entity_search",
                "subcategory": "bcf_issue_lookup",
                "question_template": "{guid}ÏôÄ Í¥ÄÎ†®Îêú BCF Ïù¥ÏäàÎäî Î¨¥ÏóáÏù∏Í∞ÄÏöî?",
                "answer_template": "Ï¥ù {count}Í∞úÏùò Ïù¥ÏäàÍ∞Ä ÏûàÏäµÎãàÎã§: {issue_list}",
                "difficulty": "medium",
                "requires": ["guid", "issue_list", "count"],
                "evaluation_type": "set_match"
            },
            {
                "category": "relationship",
                "subcategory": "connected_components",
                "question_template": "{entity_name}ÏôÄ Ïó∞Í≤∞Îêú Îã§Î•∏ ÏöîÏÜåÎì§ÏùÄ Î¨¥ÏóáÏù∏Í∞ÄÏöî?",
                "answer_template": "{entity_name}Îäî Îã§ÏùåÍ≥º Ïó∞Í≤∞ÎêòÏñ¥ ÏûàÏäµÎãàÎã§: {connected_list}",
                "difficulty": "medium",
                "requires": ["entity_name", "connected_list"],
                "evaluation_type": "set_match"
            },
            {
                "category": "temporal",
                "subcategory": "recent_issues",
                "question_template": "ÏµúÍ∑º {days}Ïùº Ïù¥ÎÇ¥Ïóê ÏÉùÏÑ±Îêú Ïù¥ÏäàÎäî Î¨¥ÏóáÏù∏Í∞ÄÏöî?",
                "answer_template": "ÏµúÍ∑º {days}Ïùº ÎÇ¥ {count}Í∞ú Ïù¥Ïäà: {issue_list}",
                "difficulty": "easy",
                "requires": ["days", "count", "issue_list"],
                "evaluation_type": "set_match"
            },
            {
                "category": "temporal",
                "subcategory": "old_issues",
                "question_template": "{days}Ïùº Ïù¥Ï†ÑÏóê ÏÉùÏÑ±Îêú Ïò§ÎûòÎêú Ïù¥ÏäàÎäî?",
                "answer_template": "{days}Ïùº Ïù¥Ï†Ñ {count}Í∞ú Ïù¥Ïäà: {issue_list}",
                "difficulty": "easy",
                "requires": ["days", "count", "issue_list"],
                "evaluation_type": "set_match"
            },
            
            # === RQ2: ÎßùÍ∞Å Î©îÏª§ÎãàÏ¶ò ÌèâÍ∞Ä ===
            {
                "category": "forgetting",
                "subcategory": "ttl_filter",
                "question_template": "TTL {ttl}Ïùº Í∏∞Ï§ÄÏúºÎ°ú Ïú†Ìö®Ìïú Ïù¥ÏäàÎßå Î≥¥Ïó¨Ï£ºÏÑ∏Ïöî.",
                "answer_template": "TTL {ttl}Ïùº Í∏∞Ï§Ä {count}Í∞ú Ïù¥ÏäàÍ∞Ä Ïú†Ìö®Ìï©ÎãàÎã§: {issue_list}",
                "difficulty": "medium",
                "requires": ["ttl", "count", "issue_list"],
                "evaluation_type": "set_match"
            },
            {
                "category": "forgetting",
                "subcategory": "old_version_citation",
                "question_template": "{guid}Ïùò Ïù¥Ï†Ñ Î≤ÑÏ†Ñ Ï†ïÎ≥¥Í∞Ä Ìè¨Ìï®ÎêòÏñ¥ ÏûàÎÇòÏöî?",
                "answer_template": "ÎßùÍ∞Å Ï†ïÏ±ÖÏóê Îî∞Îùº {status}. Ïù¥Ïú†: {reason}",
                "difficulty": "hard",
                "requires": ["guid", "status", "reason"],
                "evaluation_type": "semantic_match"
            },
            {
                "category": "forgetting",
                "subcategory": "contradiction_detection",
                "question_template": "{entity_name}Ïóê ÎåÄÌïú Î™®ÏàúÎêú Ï†ïÎ≥¥Í∞Ä ÏûàÎÇòÏöî?",
                "answer_template": "{status}. ÏÑ∏Î∂ÄÏÇ¨Ìï≠: {details}",
                "difficulty": "hard",
                "requires": ["entity_name", "status", "details"],
                "evaluation_type": "semantic_match"
            },
            
            # === RQ3: Î≥ÄÍ≤Ω ÏòÅÌñ• Ï∂îÏ†Å ===
            {
                "category": "change_impact",
                "subcategory": "multi_hop",
                "question_template": "{entity_name}ÏùÑ Î≥ÄÍ≤ΩÌïòÎ©¥ Ïñ¥Îñ§ ÏöîÏÜåÎì§Ïóê ÏòÅÌñ•ÏùÑ Ï£ºÎÇòÏöî?",
                "answer_template": "{entity_name} Î≥ÄÍ≤Ω Ïãú ÏòÅÌñ• Î∞õÎäî ÏöîÏÜå: {affected_list}",
                "difficulty": "hard",
                "requires": ["entity_name", "affected_list"],
                "evaluation_type": "set_match"
            },
            {
                "category": "change_impact",
                "subcategory": "issue_propagation",
                "question_template": "Ïù¥Ïäà '{issue_title}'Ïù¥ Ìï¥Í≤∞ÎêòÏßÄ ÏïäÏúºÎ©¥ Ïñ¥Îñ§ ÏûëÏóÖÏù¥ ÎßâÌûàÎÇòÏöî?",
                "answer_template": "ÎßâÌûàÎäî ÏûëÏóÖ: {blocked_tasks}. Ïù¥Ïú†: {reason}",
                "difficulty": "hard",
                "requires": ["issue_title", "blocked_tasks", "reason"],
                "evaluation_type": "semantic_match"
            },
            
            # === ÌÜµÌï© ÏßàÏùò ===
            {
                "category": "complex",
                "subcategory": "statistics",
                "question_template": "ÌòÑÏû¨ ÌîÑÎ°úÏ†ùÌä∏Ïùò Ï†ÑÏ≤¥ ÌÜµÍ≥ÑÎ•º Î≥¥Ïó¨Ï£ºÏÑ∏Ïöî.",
                "answer_template": "Ï¥ù IFC ÏöîÏÜå: {ifc_count}Í∞ú, BCF Ïù¥Ïäà: {bcf_count}Í∞ú, Ìï¥Í≤∞Îê®: {resolved_count}Í∞ú",
                "difficulty": "easy",
                "requires": ["ifc_count", "bcf_count", "resolved_count"],
                "evaluation_type": "exact_match"
            },
            {
                "category": "complex",
                "subcategory": "author_activity",
                "question_template": "{author}Í∞Ä ÏûëÏÑ±Ìïú Ïù¥ÏäàÎäî Î¨¥ÏóáÏù∏Í∞ÄÏöî?",
                "answer_template": "{author} ÏûëÏÑ± {count}Í∞ú: {issue_list}",
                "difficulty": "easy",
                "requires": ["author", "count", "issue_list"],
                "evaluation_type": "set_match"
            },
        ]
    
    def generate_gold_standard(self, count: int = 50) -> List[Dict[str, Any]]:
        """Gold Standard QA Ïåç ÏÉùÏÑ±"""
        
        print(f"üî® Gold Standard QA Îç∞Ïù¥ÌÑ∞ÏÖã ÏÉùÏÑ± Ï§ë ({count}Í∞ú)...")
        
        qa_pairs = []
        
        # Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ Î∂ÑÎ∞∞
        categories = {
            "entity_search": int(count * 0.25),      # 25%
            "relationship": int(count * 0.15),       # 15%
            "temporal": int(count * 0.15),           # 15%
            "forgetting": int(count * 0.20),         # 20%
            "change_impact": int(count * 0.15),      # 15%
            "complex": int(count * 0.10)             # 10%
        }
        
        qa_id = 1
        
        for category, target_count in categories.items():
            templates = [t for t in self.qa_templates if t["category"] == category]
            
            for i in range(target_count):
                template = templates[i % len(templates)]
                
                # QA Ïåç ÏÉùÏÑ±
                qa_pair = {
                    "id": f"qa_{qa_id:03d}",
                    "category": template["category"],
                    "subcategory": template["subcategory"],
                    "difficulty": template["difficulty"],
                    "question": template["question_template"],
                    "answer": template["answer_template"],
                    "requires": template["requires"],
                    "evaluation_type": template["evaluation_type"],
                    "status": "template",  # Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞Î°ú Ï±ÑÏõåÏïº Ìï®
                    "metadata": {
                        "created": datetime.now().isoformat(),
                        "validated": False,
                        "expert_reviewed": False
                    }
                }
                
                qa_pairs.append(qa_pair)
                qa_id += 1
        
        print(f"  ‚úÖ {len(qa_pairs)}Í∞ú QA ÌÖúÌîåÎ¶ø ÏÉùÏÑ± ÏôÑÎ£å")
        
        return qa_pairs
    
    def save_gold_standard(self, qa_pairs: List[Dict[str, Any]], filename: str = "gold_standard.jsonl"):
        """Gold Standard Ï†ÄÏû•"""
        
        output_path = self.eval_dir / filename
        
        with open(output_path, 'w', encoding='utf-8') as f:
            for qa in qa_pairs:
                f.write(json.dumps(qa, ensure_ascii=False) + '\n')
        
        print(f"  üíæ Ï†ÄÏû• ÏôÑÎ£å: {output_path}")
        
        # ÌÜµÍ≥Ñ ÏÉùÏÑ±
        stats = self._generate_statistics(qa_pairs)
        stats_path = self.eval_dir / "gold_standard_stats.json"
        
        with open(stats_path, 'w', encoding='utf-8') as f:
            json.dump(stats, f, indent=2, ensure_ascii=False)
        
        print(f"  üìä ÌÜµÍ≥Ñ Ï†ÄÏû•: {stats_path}")
        
        return output_path
    
    def _generate_statistics(self, qa_pairs: List[Dict[str, Any]]) -> Dict[str, Any]:
        """QA Îç∞Ïù¥ÌÑ∞ÏÖã ÌÜµÍ≥Ñ"""
        
        from collections import Counter
        
        stats = {
            "total_count": len(qa_pairs),
            "by_category": dict(Counter(qa["category"] for qa in qa_pairs)),
            "by_difficulty": dict(Counter(qa["difficulty"] for qa in qa_pairs)),
            "by_evaluation_type": dict(Counter(qa["evaluation_type"] for qa in qa_pairs)),
            "status": {
                "template": len([qa for qa in qa_pairs if qa["status"] == "template"]),
                "filled": len([qa for qa in qa_pairs if qa["status"] == "filled"]),
                "validated": len([qa for qa in qa_pairs if qa["metadata"]["validated"]])
            }
        }
        
        return stats
    
    def create_expert_validation_form(self, qa_pairs: List[Dict[str, Any]]):
        """Ï†ÑÎ¨∏Í∞Ä Í≤ÄÏ¶ù ÏñëÏãù ÏÉùÏÑ±"""
        
        form_path = self.eval_dir / "EXPERT_VALIDATION_FORM.md"
        
        with open(form_path, 'w', encoding='utf-8') as f:
            f.write(f"""# Gold Standard QA Ï†ÑÎ¨∏Í∞Ä Í≤ÄÏ¶ù ÏñëÏãù

**ÏÉùÏÑ±Ïùº**: {datetime.now().strftime('%Y-%m-%d')}  
**Ï¥ù QA Ïåç**: {len(qa_pairs)}Í∞ú  
**Í≤ÄÏ¶ùÏûê**: [Ï†ÑÎ¨∏Í∞Ä Ïù¥Î¶Ñ]  
**Í≤ÄÏ¶ùÏùº**: [ÎÇ†Ïßú]

---

## Í≤ÄÏ¶ù Í∏∞Ï§Ä

Í∞Å QA ÏåçÏóê ÎåÄÌï¥ Îã§ÏùåÏùÑ ÌèâÍ∞ÄÌï¥Ï£ºÏÑ∏Ïöî:

1. **Ï†ïÌôïÏÑ± (Accuracy)**: ÎãµÎ≥ÄÏù¥ Ï†ïÌôïÌïúÍ∞Ä?
   - ‚úÖ Ï†ïÌôïÌï®
   - ‚ö†Ô∏è Î∂ÄÎ∂ÑÏ†ÅÏúºÎ°ú Ï†ïÌôï
   - ‚ùå Î∂ÄÏ†ïÌôï

2. **ÏôÑÏ†ÑÏÑ± (Completeness)**: ÎãµÎ≥ÄÏù¥ ÏôÑÏ†ÑÌïúÍ∞Ä?
   - ‚úÖ ÏôÑÏ†ÑÌï®
   - ‚ö†Ô∏è Ï∂îÍ∞Ä Ï†ïÎ≥¥ ÌïÑÏöî
   - ‚ùå Î∂àÏôÑÏ†Ñ

3. **ÌòÑÏã§ÏÑ± (Realism)**: Ïã§Ï†ú BIM ÌîÑÎ°úÏ†ùÌä∏ÏóêÏÑú Î∞úÏÉùÌï† Î≤ïÌïú ÏßàÎ¨∏Ïù∏Í∞Ä?
   - ‚úÖ ÌòÑÏã§Ï†Å
   - ‚ö†Ô∏è Í∞ÄÎä•ÌïòÏßÄÎßå ÎìúÎ¨æ
   - ‚ùå ÎπÑÌòÑÏã§Ï†Å

4. **ÎÇúÏù¥ÎèÑ (Difficulty)**: ÏÑ§Ï†ïÎêú ÎÇúÏù¥ÎèÑÍ∞Ä Ï†ÅÏ†àÌïúÍ∞Ä?
   - ‚úÖ Ï†ÅÏ†àÌï®
   - ‚ö†Ô∏è Ï°∞Ï†ï ÌïÑÏöî
   - ‚ùå Î∂ÄÏ†ÅÏ†à

---

## QA Ïåç Î¶¨Ïä§Ìä∏

""")
            
            # Ïπ¥ÌÖåÍ≥†Î¶¨Î≥ÑÎ°ú Ï†ïÎ¶¨
            by_category = {}
            for qa in qa_pairs:
                cat = qa["category"]
                if cat not in by_category:
                    by_category[cat] = []
                by_category[cat].append(qa)
            
            for category, qas in sorted(by_category.items()):
                f.write(f"\n### {category.replace('_', ' ').title()} ({len(qas)}Í∞ú)\n\n")
                
                for i, qa in enumerate(qas[:5], 1):  # ÏÉòÌîåÎ°ú 5Í∞úÎßå
                    f.write(f"#### {qa['id']}\n\n")
                    f.write(f"**ÏßàÎ¨∏**: {qa['question']}\n\n")
                    f.write(f"**ÎãµÎ≥Ä**: {qa['answer']}\n\n")
                    f.write(f"**ÎÇúÏù¥ÎèÑ**: {qa['difficulty']}\n\n")
                    f.write(f"**Í≤ÄÏ¶ù**:\n")
                    f.write(f"- [ ] Ï†ïÌôïÏÑ±: ___\n")
                    f.write(f"- [ ] ÏôÑÏ†ÑÏÑ±: ___\n")
                    f.write(f"- [ ] ÌòÑÏã§ÏÑ±: ___\n")
                    f.write(f"- [ ] ÎÇúÏù¥ÎèÑ: ___\n")
                    f.write(f"- ÏΩîÎ©òÌä∏: ___\n\n")
                    f.write("---\n\n")
                
                if len(qas) > 5:
                    f.write(f"_(... ÎÇòÎ®∏ÏßÄ {len(qas) - 5}Í∞ú QA Ïåç ÏÉùÎûµ)_\n\n")
            
            f.write(f"""
---

## Ï†ÑÏ≤¥ ÌèâÍ∞Ä

### Îç∞Ïù¥ÌÑ∞ÏÖã ÌíàÏßà

1. Ï†ÑÎ∞òÏ†ÅÏù∏ ÌíàÏßà: [ ] Ïö∞Ïàò [ ] ÏñëÌò∏ [ ] Î≥¥ÌÜµ [ ] Í∞úÏÑ† ÌïÑÏöî

2. Ï£ºÏöî Í∞ïÏ†ê:
   - 
   - 

3. Í∞úÏÑ†Ïù¥ ÌïÑÏöîÌïú Î∂ÄÎ∂Ñ:
   - 
   - 

4. Ï∂îÍ∞Ä Ï†úÏïà ÏÇ¨Ìï≠:
   - 
   - 

### ÏÑúÎ™Ö

**Í≤ÄÏ¶ùÏûê**: _______________  
**ÏÜåÏÜç**: _______________  
**Í≤ΩÎ†•**: ___ ÎÖÑ  
**ÎÇ†Ïßú**: _______________

---

**Í≤ÄÏ¶ù ÏôÑÎ£å ÌõÑ Ïù¥ ÌååÏùºÏùÑ Îã§Ïùå Í≤ΩÎ°úÎ°ú Ï†úÏ∂úÌï¥Ï£ºÏÑ∏Ïöî**:
- Ïù¥Î©îÏùº: [your-email@example.com]
- ÎòêÎäî: eval/expert_reviews/[Í≤ÄÏ¶ùÏûêÎ™Ö]_validation.md
""")
        
        print(f"  üìã Ï†ÑÎ¨∏Í∞Ä Í≤ÄÏ¶ù ÏñëÏãù ÏÉùÏÑ±: {form_path}")
        
        return form_path


def main():
    """Î©îÏù∏ Ïã§Ìñâ"""
    
    base_dir = Path(__file__).parent.parent
    generator = GoldStandardGenerator(base_dir)
    
    print("=" * 70)
    print("üéØ Gold Standard QA Îç∞Ïù¥ÌÑ∞ÏÖã ÏÉùÏÑ±")
    print("=" * 70)
    print()
    
    # 1. QA Ïåç ÏÉùÏÑ±
    qa_pairs = generator.generate_gold_standard(count=50)
    
    # 2. Ï†ÄÏû•
    output_path = generator.save_gold_standard(qa_pairs)
    
    # 3. Ï†ÑÎ¨∏Í∞Ä Í≤ÄÏ¶ù ÏñëÏãù ÏÉùÏÑ±
    form_path = generator.create_expert_validation_form(qa_pairs)
    
    # ÏöîÏïΩ
    print()
    print("=" * 70)
    print("‚úÖ Gold Standard ÏÉùÏÑ± ÏôÑÎ£å")
    print("=" * 70)
    print(f"""
üìä ÌÜµÍ≥Ñ:
  - Ï¥ù QA Ïåç: {len(qa_pairs)}Í∞ú
  - Ïπ¥ÌÖåÍ≥†Î¶¨: 6Í∞ú (Entity, Relationship, Temporal, Forgetting, Change, Complex)
  - ÎÇúÏù¥ÎèÑ: Easy/Medium/Hard

üìÇ ÏÉùÏÑ± ÌååÏùº:
  - {output_path}
  - {output_path.parent / 'gold_standard_stats.json'}
  - {form_path}

üìù Îã§Ïùå Îã®Í≥Ñ:
  1. ‚ö†Ô∏è  ÌÖúÌîåÎ¶øÏùÑ Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞Î°ú Ï±ÑÏö∞Í∏∞
     ‚Üí python eval/fill_gold_standard.py
  
  2. Ï†ÑÎ¨∏Í∞Ä Í≤ÄÏ¶ù ÏùòÎ¢∞
     ‚Üí eval/EXPERT_VALIDATION_FORM.md Ï†ÑÎã¨
  
  3. ÌèâÍ∞Ä Î©îÌä∏Î¶≠ Íµ¨ÌòÑ
     ‚Üí python eval/metrics.py
""")


if __name__ == "__main__":
    main()

